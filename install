#!/usr/bin/env python3
import argparse
import subprocess
import sys
import os
from os import chdir
from os.path import dirname, realpath, join, isfile, basename, splitext

# from tempfile import TemporaryFile
from glob import glob

# resolve symlinks
BASE_DIR = dirname(realpath(__file__))
DOTBOT_DIR = os.path.join(BASE_DIR, "dotbot")

chdir(BASE_DIR)

# add arguments
parser = argparse.ArgumentParser(prog="dotbot")
parser.add_argument("-c", "--config", nargs="*", help="configs to install")
parser.add_argument("-U", "--update", action="store_true", help="update dotbot")
parser.add_argument("--list", action="store_true", help="list configs")
parser.add_argument("profile", nargs="?", help="specify profile to install")

# add arguments for help, these are passed directly to dotbot
if "-h" in sys.argv or "--help" in sys.argv:
    parser.add_argument('-Q', '--super-quiet', action='store_true',
        help='suppress almost all output')
    parser.add_argument('-q', '--quiet', action='store_true',
        help='suppress most output')
    parser.add_argument('-v', '--verbose', action='store_true',
        help='enable verbose output')
    parser.add_argument('-p', '--plugin', action='append', dest='plugins', default=[],
        help='load PLUGIN as a plugin', metavar='PLUGIN')
    parser.add_argument('--disable-built-in-plugins',
        action='store_true', help='disable built-in plugins')
    parser.add_argument('--plugin-dir', action='append', dest='plugin_dirs', default=[],
        metavar='PLUGIN_DIR', help='load all plugins in PLUGIN_DIR')
    parser.add_argument('--only', nargs='+', 
        help='only run specified directives', metavar='DIRECTIVE')
    parser.add_argument('--except', nargs='+', dest='skip',
        help='skip specified directives', metavar='DIRECTIVE')
    parser.add_argument('--force-color', dest='force_color', action='store_true',
        help='force color output')
    parser.add_argument('--no-color', dest='no_color', action='store_true',
        help='disable color output')
    parser.add_argument('--version', action='store_true',
        help='show program\'s version number and exit')

args, extra = parser.parse_known_args()

if args.update:
    subprocess.run(
        "git pull; git submodule update --init --recursive --remote",
        stdin=True,
        stderr=True,
        stdout=True,
        shell=True,
    )

if args.list:
    print("Configs:")
    for path in glob("meta/**/*.yaml"):
        print("  %s" % splitext(basename(path))[0])
    exit(0)

if not args.profile and not args.config:
    if not extra:
        exit(0)
    args = [sys.executable, "./dotbot/bin/dotbot", "-d", BASE_DIR, *extra]
    exit(subprocess.run(args, stdin=True, stderr=True, stdout=True).returncode)


def get_profile(profile):
    path = join(BASE_DIR, "meta/profiles", profile)
    if not isfile(path):
        print("Profile '%s' does not exist!" % profile)
        exit(0)

    with open(path) as file:
        config = file.read().splitlines()

    configs = []

    for line in config:
        if line.startswith(":"):
            configs.extend(get_profile(line[1:]))
        else:
            configs.append(line)

    return configs


configs = []

if args.profile:
    configs.extend(get_profile(args.profile))

if args.config:
    configs.extend(args.config)

print("Using:", ", ".join(configs))

meta_configs = glob("meta/**/*.yaml")

config_files = []
for config in configs:
    for path in meta_configs:
        name = splitext(basename(path))[0]
        if name == config:
            config_files.append(path)

for file in config_files:
    print("\u001b[33mConfiguring '%s'\u001b[0m" % splitext(basename(file))[0])

    args = [
        sys.executable,
        "./dotbot/bin/dotbot",
        "-d",
        BASE_DIR,
        "--plugin-dir",
        join(BASE_DIR, "dotbot-plugins"),
        "-c",
        file,
        *extra,
    ]

    subprocess.run(args, stdin=True, stderr=True, stdout=True)
